  domain: my-custom-domain.com
  certificate: arn:aws:acm:us-east-1:...     # The ARN for the SSL cert to use form AWS CertificateManager
  bucketName: ${self:service}-web-${self:provider.stage}                # Unique name for the S3 bucket to host the client assets
  distributionFolder: src/web/build            # Path to the client assets to be uploaded to S3
  indexDocument: index.html                  # The index document to use
  errorDocument: error.html                  # The error document to use
  singlePageApp: false                       # If true 403 errors will be rerouted (missing assets) to your root index document to support single page apps like React and Angular where the js framework handles routing
  invalidationPaths:                         # Custom invalidationPaths for cloudfront in case your frontend framework uses filename hashing
    - /index.html
    - /error.html
  compressWebContent: true                   # Use compression when serving web content
  apiPath: api                               # The path prefix for your API Gateway lambdas. The path for the lambda http event trigger needs to start with this too eg. api/myMethod
  apiGatewayRestApiId: ${self:service}-api-${self:provider.stage}            # If "Api Gateway Rest Api" is not part of the same serverless template, you can set your API id here 
  clientCommand: "npm run buildAndExport:${self:provider.stage}"                  # Command to generate the client assets. Defaults to doing nothing
  clientSrcPath: src/web                      # The path to where you want to run the clientCommand
  waf: ${self:service}-waf-${self:provider.stage}   # ID of the Web Application Firewall. Defaults to not used
  logging:
    bucket: ${self:service}-${self:provider.stage}.s3.amazonaws.com
    prefix: web
  minimumProtocolVersion: TLSv1.2_2018
  priceClass: PriceClass_100
  noConfirm: true