[{"/Users/wellsj7/apps/animus-bi/src/web/src/index.tsx":"1","/Users/wellsj7/apps/animus-bi/src/web/src/reportWebVitals.ts":"2","/Users/wellsj7/apps/animus-bi/src/web/src/App.tsx":"3","/Users/wellsj7/apps/animus-bi/src/web/src/components/PreSessionLoadingIndicator.component.tsx":"4","/Users/wellsj7/apps/animus-bi/src/web/src/pages/dashboard.tsx":"5","/Users/wellsj7/apps/animus-bi/src/web/src/pages/onBoard.tsx":"6","/Users/wellsj7/apps/animus-bi/src/web/src/store/index.ts":"7","/Users/wellsj7/apps/animus-bi/src/web/src/components/ConditionalLoadingIndicator.component.tsx":"8","/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/Welcome.component.tsx":"9","/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/SelectProjects.component.tsx":"10","/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/SelectBoards.component.tsx":"11","/Users/wellsj7/apps/animus-bi/src/web/src/store/session.store.ts":"12","/Users/wellsj7/apps/animus-bi/src/web/src/store/atlassian.store.ts":"13","/Users/wellsj7/apps/animus-bi/src/web/src/components/BoardSelector.component.tsx":"14","/Users/wellsj7/apps/animus-bi/src/web/src/components/ProjectSelector.component.tsx":"15","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/index.ts":"16","/Users/wellsj7/apps/animus-bi/src/web/src/actions/session.actions.ts":"17","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/jira.api.service.ts":"18","/Users/wellsj7/apps/animus-bi/src/web/src/services/jwt-parser.service.ts":"19","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/session.state.ts":"20","/Users/wellsj7/apps/animus-bi/src/web/src/actions/index.ts":"21","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-issue.store.ts":"22","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-project.store.ts":"23","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-board.store.ts":"24","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-sprint.store.ts":"25","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/index.ts":"26","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/index.ts":"27","/Users/wellsj7/apps/animus-bi/src/web/src/services/jira-request.model.ts":"28","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/helpers.ts":"29","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/index.ts":"30","/Users/wellsj7/apps/animus-bi/src/web/src/actions/atlassian.actions.ts":"31","/Users/wellsj7/apps/animus-bi/src/web/src/store/helpers.ts":"32","/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-board.actions.ts":"33","/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-sprint.actions.ts":"34","/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-issue.actions.ts":"35","/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-project.actions.ts":"36","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/app.api.service.ts":"37","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/atlassian.state.ts":"38","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-sprint.state.ts":"39","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-board.state.ts":"40","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store-config.ts":"41","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/state-context.ts":"42","/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/index.ts":"43","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store.ts":"44","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/index.ts":"45","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/prefix.ts":"46","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/creators.ts":"47","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-root-context.ts":"48","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-bus.ts":"49","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-project.state.ts":"50","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-issue.state.ts":"51","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-logger.ts":"52","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store-handler.ts":"53","/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/action.ts":"54"},{"size":510,"mtime":1612637815122,"results":"55","hashOfConfig":"56"},{"size":425,"mtime":1612617897749,"results":"57","hashOfConfig":"56"},{"size":1072,"mtime":1612647300458,"results":"58","hashOfConfig":"56"},{"size":976,"mtime":1612639443720,"results":"59","hashOfConfig":"56"},{"size":866,"mtime":1612639549381,"results":"60","hashOfConfig":"56"},{"size":1324,"mtime":1612637354320,"results":"61","hashOfConfig":"56"},{"size":92,"mtime":1612612442750,"results":"62","hashOfConfig":"56"},{"size":343,"mtime":1612612025356,"results":"63","hashOfConfig":"56"},{"size":1267,"mtime":1612640964298,"results":"64","hashOfConfig":"56"},{"size":1514,"mtime":1612636773227,"results":"65","hashOfConfig":"56"},{"size":1563,"mtime":1612636667141,"results":"66","hashOfConfig":"56"},{"size":4805,"mtime":1612638960783,"results":"67","hashOfConfig":"56"},{"size":687,"mtime":1612613961305,"results":"68","hashOfConfig":"56"},{"size":1910,"mtime":1612634981166,"results":"69","hashOfConfig":"56"},{"size":3046,"mtime":1612636610548,"results":"70","hashOfConfig":"56"},{"size":146,"mtime":1612612398375,"results":"71","hashOfConfig":"72"},{"size":966,"mtime":1612618780593,"results":"73","hashOfConfig":"56"},{"size":5457,"mtime":1612636157429,"results":"74","hashOfConfig":"72"},{"size":2222,"mtime":1612611995784,"results":"75","hashOfConfig":"56"},{"size":816,"mtime":1612618772211,"results":"76","hashOfConfig":"72"},{"size":95,"mtime":1612618039187,"results":"77","hashOfConfig":"72"},{"size":1253,"mtime":1612618835250,"results":"78","hashOfConfig":"72"},{"size":3259,"mtime":1612618835250,"results":"79","hashOfConfig":"72"},{"size":4765,"mtime":1612618835250,"results":"80","hashOfConfig":"72"},{"size":1228,"mtime":1612621138924,"results":"81","hashOfConfig":"72"},{"size":34,"mtime":1612611995644,"results":"82","hashOfConfig":"72"},{"size":91,"mtime":1612618046758,"results":"83","hashOfConfig":"72"},{"size":1336,"mtime":1612611995744,"results":"84","hashOfConfig":"72"},{"size":630,"mtime":1612611995641,"results":"85","hashOfConfig":"72"},{"size":90,"mtime":1612611972306,"results":"86","hashOfConfig":"72"},{"size":178,"mtime":1612618039185,"results":"87","hashOfConfig":"72"},{"size":1415,"mtime":1612612562535,"results":"88","hashOfConfig":"72"},{"size":830,"mtime":1612618039190,"results":"89","hashOfConfig":"72"},{"size":198,"mtime":1612618039198,"results":"90","hashOfConfig":"72"},{"size":201,"mtime":1612618039191,"results":"91","hashOfConfig":"72"},{"size":852,"mtime":1612618039192,"results":"92","hashOfConfig":"72"},{"size":2154,"mtime":1612637575541,"results":"93","hashOfConfig":"72"},{"size":46,"mtime":1612618046757,"results":"94","hashOfConfig":"72"},{"size":88,"mtime":1612621132516,"results":"95","hashOfConfig":"72"},{"size":337,"mtime":1612618046760,"results":"96","hashOfConfig":"72"},{"size":745,"mtime":1612611972308,"results":"97","hashOfConfig":"72"},{"size":484,"mtime":1612611972307,"results":"98","hashOfConfig":"72"},{"size":154,"mtime":1612618039189,"results":"99","hashOfConfig":"72"},{"size":2121,"mtime":1612611972313,"results":"100","hashOfConfig":"72"},{"size":146,"mtime":1612618046759,"results":"101","hashOfConfig":"72"},{"size":114,"mtime":1612637620261,"results":"102","hashOfConfig":"72"},{"size":700,"mtime":1612611972305,"results":"103","hashOfConfig":"72"},{"size":3747,"mtime":1612611972318,"results":"104","hashOfConfig":"72"},{"size":2632,"mtime":1612611972316,"results":"105","hashOfConfig":"72"},{"size":183,"mtime":1612618046762,"results":"106","hashOfConfig":"72"},{"size":60,"mtime":1612618046761,"results":"107","hashOfConfig":"72"},{"size":1671,"mtime":1612611972317,"results":"108","hashOfConfig":"72"},{"size":159,"mtime":1612611972311,"results":"109","hashOfConfig":"72"},{"size":613,"mtime":1612641769245,"results":"110","hashOfConfig":"72"},{"filePath":"111","messages":"112","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},"x9mgb9",{"filePath":"115","messages":"116","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"1c5xsh0",{"filePath":"146","messages":"147","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"145"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"145"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"145"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"145"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"145"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"/Users/wellsj7/apps/animus-bi/src/web/src/index.tsx",["227"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["228","229","230","231","232","233"],"/Users/wellsj7/apps/animus-bi/src/web/src/reportWebVitals.ts",["234"],"/Users/wellsj7/apps/animus-bi/src/web/src/App.tsx",["235"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/PreSessionLoadingIndicator.component.tsx",["236"],"/Users/wellsj7/apps/animus-bi/src/web/src/pages/dashboard.tsx",["237"],"/Users/wellsj7/apps/animus-bi/src/web/src/pages/onBoard.tsx",["238"],"/Users/wellsj7/apps/animus-bi/src/web/src/store/index.ts",["239"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/ConditionalLoadingIndicator.component.tsx",["240"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/Welcome.component.tsx",["241"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/SelectProjects.component.tsx",["242"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/OnBoard/SelectBoards.component.tsx",["243"],"/Users/wellsj7/apps/animus-bi/src/web/src/store/session.store.ts",["244"],"/Users/wellsj7/apps/animus-bi/src/web/src/store/atlassian.store.ts",["245"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/BoardSelector.component.tsx",["246"],"/Users/wellsj7/apps/animus-bi/src/web/src/components/ProjectSelector.component.tsx",["247"],"/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/index.ts",[],["248","249"],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/session.actions.ts",["250"],"/Users/wellsj7/apps/animus-bi/src/web/src/services/api/jira.api.service.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/services/jwt-parser.service.ts",["251"],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/session.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-issue.store.ts",["252"],"import { StateContext, Store } from '../lib/src';\nimport {\n  AtlassianState,\n  SessionState,\n  JiraProjectState,\n  JiraIssueState\n} from '../../models/state'\nimport { JiraIssueIntent, GetJiraIssuesForBoards } from '../../actions/jira/jira-issue.actions';\nimport { JiraApiService } from '../../../../web/src/services/api/jira.api.service';\nimport { forkJoin } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\n\nconst getJiraIssuesForBoards = (ctx: StateContext<JiraIssueState>, action: GetJiraIssuesForBoards) => {\n  const { atlassian } = ctx.getRootState() as {\n    atlassian: AtlassianState,\n    session: SessionState,\n    jiraProject: JiraProjectState\n  };\n\n  if (atlassian && atlassian.AP) {\n    // return forkJoin(action.currentSprints.map((sprint: string) => sprint))\n    return new JiraApiService(atlassian.AP.request)\n      .getIssuesForBoards(action.selectedBoards)\n      .pipe(\n        mergeMap((currentIssues: any[]) => {\n          return ctx.patchState({\n            currentIssues\n          });\n        })\n      )\n  }\n}\n\nexport const JiraIssueStore = Store.Create<JiraIssueState>({\n  name: JiraIssueIntent,\n  initialState: new JiraIssueState(),\n  handlers: {\n    [GetJiraIssuesForBoards.Type]: getJiraIssuesForBoards.bind(this)\n  }\n});","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-project.store.ts",["253"],"import { Store } from '../lib/src';\nimport { mergeMap, tap } from 'rxjs/operators';\nimport { JiraApiService } from '../../../../web/src/services/api/jira.api.service';\nimport { StateContext } from '../lib/src';\nimport { SessionInitComplete, SaveUserProperty } from '../../actions/session.actions';\nimport * as JiraProjectActions from '../../actions/jira/jira-project.actions';\nimport {\n  JiraProjectState,\n  AtlassianState,\n  SessionState,\n} from '../../models/state';\nimport { distinctBy, innerJoin } from '../helpers';\nimport { of } from 'rxjs';\n\n\nconst getJiraProjects = (ctx: StateContext<JiraProjectState>, action: JiraProjectActions.GetJiraProjects) => {\n\n  if (action.atlassian && action.atlassian.AP) {\n    return new JiraApiService(action.atlassian.AP.request)\n      .getProjects()\n      .pipe(mergeMap((response: any) => {\n        const distinctProjects = distinctBy('id', [ ...response.values, ...(ctx.getState().projects || []) ]);\n        ctx.patchState({\n          projects: distinctProjects,\n        });\n        return ctx.dispatch(new JiraProjectActions.SaveJiraProjects(action.session.user.selectedProjects));\n      }));\n  }\n}\n\nconst getUserProjects = (ctx: StateContext<JiraProjectState>) => {\n  const { atlassian, session } = ctx.getRootState() as { atlassian: AtlassianState, session: SessionState };\n  return ctx.dispatch(new JiraProjectActions.GetJiraProjects(atlassian, session));\n}\n\nconst saveJiraProjectSelections = (ctx: StateContext<JiraProjectState>, action: JiraProjectActions.SaveJiraProjects) => {\n  const { projects, loaded } = ctx.getState();\n  const filteredSelectedProjects = innerJoin(\n    projects, (project) => project.id.toString(),\n    action.projectIdsToSave || [], (pId) => pId.toString()\n  );\n\n  return ctx.patchState({\n    savedProjects: action.projectIdsToSave,\n    selectedProjects: filteredSelectedProjects,\n  }).pipe(\n    mergeMap((_) => \n      ctx.dispatch(new SaveUserProperty({ selectedProjects: action.projectIdsToSave }))\n    ),\n    tap((_) => {\n      if (!loaded) {\n        ctx.dispatch(new JiraProjectActions.ProjectsLoaded());\n      }\n    }));\n}\n\nconst setSelectedJiraProjects = (ctx: StateContext<JiraProjectState>, action: JiraProjectActions.SetSelectedJiraProjects) => {\n  return ctx.patchState({\n    selectedProjects: action.selectedProjects\n  });\n}\n\nconst toggleDialog = (ctx: StateContext<JiraProjectState>, action: JiraProjectActions.ToggleDialog) => {\n  return ctx.patchState({\n    dialogOpen: !ctx.getState().dialogOpen\n  });\n}\n\nconst projectsLoaded = (ctx: StateContext<JiraProjectState>) => {\n  return ctx.patchState({\n    loaded: true\n  });\n}\n\n\nexport const JiraProjectStore = Store.Create<JiraProjectState>({\n    name: JiraProjectActions.JiraProjectIntent,\n    initialState: new JiraProjectState(),\n    handlers: {\n      [SessionInitComplete.Type]: getUserProjects.bind(this),\n      [JiraProjectActions.GetJiraProjects.Type]: getJiraProjects.bind(this),\n      [JiraProjectActions.SetSelectedJiraProjects.Type]: setSelectedJiraProjects.bind(this),\n      [JiraProjectActions.ToggleDialog.Type]: toggleDialog.bind(this),\n      [JiraProjectActions.SaveJiraProjects.Type]: saveJiraProjectSelections.bind(this),\n      [JiraProjectActions.ProjectsLoaded.Type]: projectsLoaded.bind(this),\n    }\n});","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-board.store.ts",["254","255","256","257","258","259"],"import { forkJoin } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { JiraApiService } from '../../../../web/src/services/api/jira.api.service';\nimport {\n  AtlassianState,\n  SessionState,\n  JiraProjectState\n} from '../../models/state';\nimport {\n  SaveUserProperty,\n  GetJiraIssuesForBoards,\n  SaveJiraProjects,\n} from '../../actions';\nimport { JiraIssueStore } from './jira-issue.store'; \nimport { distinctBy, innerJoin, outerJoin } from '../helpers';\nimport { StateContext, Store } from '../lib/src';\nimport { JiraSprintStore } from './jira-sprint.store';\nimport { GetJiraSprintsForBoards } from '../../actions/jira/jira-sprint.actions';\nimport {\n  AddJiraBoard,\n  GetJiraBoardsForSelectedProjects,\n  JiraBoardIntent,\n  RemoveJiraBoard,\n  SaveJiraBoards,\n  SetSelectedJiraBoards\n} from '../../actions/jira/jira-board.actions';\nimport { JiraBoardState } from '../../models/state/jira/jira-board.state';\n\nconst initBoards = (ctx: StateContext<JiraBoardState>, action: SaveJiraProjects) => {\n  return ctx.dispatch(new GetJiraBoardsForSelectedProjects(action.projectIdsToSave));\n}\n\nconst getJiraProjectBoards = (ctx: StateContext<JiraBoardState>, action: GetJiraBoardsForSelectedProjects) => {\n  const { atlassian, session, jiraProject } = ctx.getRootState() as {\n    atlassian: AtlassianState,\n    session: SessionState,\n    jiraProject: JiraProjectState\n  };\n\n  if (atlassian && atlassian.AP) {\n    return new JiraApiService(atlassian.AP.request)\n      .getBoardsForProjects(action.projectIds)\n      .pipe(mergeMap((boards: any[]) => {\n        const savedBoards = [ ...(session.user.selectedBoards || []), ...ctx.getState().savedBoards ];\n\n        const allBoardsAvailableToJiraUser =  distinctBy('id', boards).map((board) => {\n          board.projectAvatarUrl = jiraProject.projects.filter((p) => p.id === `${board.location?.projectId}`)[0]?.avatarUrls['16x16'];\n          return board;\n        });\n\n        const previouslySavedBoardsForSelectedProjects = innerJoin(\n          allBoardsAvailableToJiraUser, (board: any) => board.id,\n          savedBoards, (savedBoardId) => savedBoardId\n        ).map((x:any) => x.id);\n\n        ctx.patchState({\n          boards: allBoardsAvailableToJiraUser,\n        });\n\n        return ctx.dispatch(new SaveJiraBoards(previouslySavedBoardsForSelectedProjects));\n      }));\n  }\n}\n\nconst setSelectedJiraBoards = (ctx: StateContext<JiraBoardState>, action: SetSelectedJiraBoards) => {\n  return ctx.patchState({\n    selectedBoards: action.selectedBoards\n  });\n}\n\nconst addJiraBoard = (ctx: StateContext<JiraBoardState>, action: AddJiraBoard) => {\n  const boardIdsToSave = [ \n    action.board.id,\n    ...ctx.getState().savedBoards\n  ];\n  return ctx.dispatch(new SaveJiraBoards(boardIdsToSave));\n}\n\nconst removeJiraBoard = (ctx: StateContext<JiraBoardState>, action: RemoveJiraBoard) => {\n  const boardIdsToSave = ctx.getState().savedBoards\n    .filter((boardId) => boardId.toString() !== action.board.id.toString());\n  return ctx.dispatch(new SaveJiraBoards(boardIdsToSave));\n}\n\nconst saveJiraBoardSelections = (ctx: StateContext<JiraBoardState>, action: SaveJiraBoards) => {\n  const { boards } = ctx.getState();\n  const filteredSelectedBoards = innerJoin(\n    boards, (board) => board.id,\n    action.boardIdsToSave, (savedBoardId) => savedBoardId\n  );\n\n  const availableBoards = outerJoin(\n    boards, (board) => board.id,\n    action.boardIdsToSave, (savedBoardId) => savedBoardId\n  );\n\n  ctx.patchState({\n    savedBoards: action.boardIdsToSave,\n    selectedBoards: filteredSelectedBoards,\n    availableBoards\n  });\n\n  const sprintBoards = filteredSelectedBoards.filter((board: any) => board.type.toLowerCase() === 'scrum');\n  const kanbanBoards = filteredSelectedBoards.filter((board: any) => board.type.toLowerCase() === 'kanban');\n\n  // return forkJoin([\n  //   ctx.dispatch(new GetJiraIssuesForBoards(filteredSelectedBoards)),\n  //   ctx.dispatch(new GetJiraSprintsForBoards(filteredSelectedBoards))\n  // ])\n\n  return ctx.dispatch(new GetJiraIssuesForBoards(filteredSelectedBoards));\n  // ctx.dispatch(new GetJiraSprintsForBoards(filteredSelectedBoards)).pipe((_) =>\n  //   ctx.dispatch(new SaveUserProperty({ selectedBoards: action.boardIdsToSave }))\n  // );\n\n}\n\nexport const JiraBoardStore = Store.Create<JiraBoardState>({\n  name: JiraBoardIntent,\n  initialState: new JiraBoardState(),\n  handlers: {\n    [SaveJiraProjects.Type]: initBoards.bind(this),\n    [GetJiraBoardsForSelectedProjects.Type]: getJiraProjectBoards.bind(this),\n    [AddJiraBoard.Type]: addJiraBoard.bind(this),\n    [RemoveJiraBoard.Type]: removeJiraBoard.bind(this),\n    [SaveJiraBoards.Type]: saveJiraBoardSelections.bind(this),\n    [SetSelectedJiraBoards.Type]: setSelectedJiraBoards.bind(this),\n  },\n  dependentStores: [ JiraIssueStore ]\n})","/Users/wellsj7/apps/animus-bi/src/web/src/store/jira/jira-sprint.store.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/services/api/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/services/jira-request.model.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/services/api/helpers.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/atlassian.actions.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/helpers.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-board.actions.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-sprint.actions.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-issue.actions.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/jira-project.actions.ts",["260"],"import { AtlassianState, SessionState } from \"../../models/state\";\n\nexport const JiraProjectIntent = 'jiraProject';\n\nexport class GetJiraProjects {\n  static Type = `[${JiraProjectIntent}] Get Jira Projects Available To User`;\n  constructor(public atlassian: AtlassianState, public session: SessionState) { }\n}\n\nexport class SetSelectedJiraProjects {\n  static Type = `[${JiraProjectIntent}] Set Selected Jira Projects`;\n  constructor(public selectedProjects: any[] = []) { }\n}\n\nexport class ToggleDialog {\n  static Type = `[${JiraProjectIntent}] Toggle Projects Dialog`;\n  constructor() { }\n}\n\nexport class SaveJiraProjects {\n  static Type = `[${JiraProjectIntent}] Save Jira Projects For User`;\n  constructor(public projectIdsToSave: string[] = []) { }\n}\n\nexport class ProjectsLoaded {\n  static Type = `[${JiraProjectIntent}] Projects State Loaded`;\n}\n","/Users/wellsj7/apps/animus-bi/src/web/src/services/api/app.api.service.ts",["261","262"],"import { ajax } from 'rxjs/ajax';\nimport { map, mergeMap, tap } from 'rxjs/operators';\nimport { apiPrefix } from './prefix';\n\nconst basicAuthKey = 'foo';\n\nexport class AppApiService {\n\n  constructor() { }\n\n  static getAppId(origin) {\n    return ajax({\n      url: `${apiPrefix}app?baseUrl=${encodeURIComponent(origin)}`,\n      method: 'GET',\n      headers: {\n        authorization: `basic ${btoa(`${basicAuthKey}:${origin}`)}`\n      }\n    })\n    .pipe(map(x => x.response));\n  }\n\n  static getToken(origin, appId, atlassianAccountId) {\n    return ajax({\n      url: `${apiPrefix}app/${appId}/user/${encodeURIComponent(atlassianAccountId)}/auth`,\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        authorization: `basic ${btoa(`${basicAuthKey}:${origin}`)}`\n      }\n    }).pipe(map(x => x.response));\n  }\n\n  static initUserSession(origin: string, atlassianAccountId: string) {\n\n    return AppApiService.getAppId(origin).pipe(\n      mergeMap((appInstance) => \n        AppApiService.getToken(origin, appInstance._id, atlassianAccountId)\n      ),\n    );\n\n  }\n\n  static getUserData(accessToken, appId, userId) {\n    return ajax({\n      url: `${apiPrefix}app/${appId}/user/${userId}`,\n      method: 'GET',\n      headers: {\n        authorization: `bearer ${accessToken}`\n      }\n    })\n    .pipe(map(x => x.response));\n  }\n\n  static saveUserProperty = (encodedToken: string, appId: string, userId: string, body: any) => {\n    const urlParam = Object.keys(body)[0];\n    return ajax({\n      url: `${apiPrefix}app/${appId}/user/${userId}/${urlParam}`,\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json',\n        authorization: `bearer ${encodedToken}`\n      },\n      body\n    }).pipe(map(x => x.response));\n  }\n\n  static saveUserSelectedProjects = (encodedToken, appId, userId, selectedProjects: any[]) => {\n    return AppApiService.saveUserProperty(encodedToken, appId, userId, { selectedProjects });\n  }\n\n  static saveUserSelectedBoards = (encodedToken, appId, userId, selectedBoards: any[]) => {\n    return AppApiService.saveUserProperty(encodedToken, appId, userId, { selectedBoards });\n  }\n\n}","/Users/wellsj7/apps/animus-bi/src/web/src/models/state/atlassian.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-sprint.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-board.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store-config.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/state-context.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/actions/jira/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/index.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/services/api/prefix.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/creators.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-root-context.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-bus.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-project.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/models/state/jira/jira-issue.state.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/xs-logger.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/store-handler.ts",[],"/Users/wellsj7/apps/animus-bi/src/web/src/store/lib/src/action.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":null,"fatal":true,"severity":2,"message":"263"},{"ruleId":"280","severity":1,"message":"281","line":10,"column":10,"nodeType":"282","messageId":"283","endLine":10,"endColumn":18},{"ruleId":"280","severity":1,"message":"284","line":13,"column":10,"nodeType":"282","messageId":"283","endLine":13,"endColumn":12},{"ruleId":"280","severity":1,"message":"281","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":18},{"ruleId":"280","severity":1,"message":"285","line":10,"column":3,"nodeType":"282","messageId":"283","endLine":10,"endColumn":19},{"ruleId":"280","severity":1,"message":"286","line":17,"column":10,"nodeType":"282","messageId":"283","endLine":17,"endColumn":25},{"ruleId":"280","severity":1,"message":"287","line":18,"column":10,"nodeType":"282","messageId":"283","endLine":18,"endColumn":33},{"ruleId":"280","severity":1,"message":"288","line":103,"column":9,"nodeType":"282","messageId":"283","endLine":103,"endColumn":21},{"ruleId":"280","severity":1,"message":"289","line":104,"column":9,"nodeType":"282","messageId":"283","endLine":104,"endColumn":21},{"ruleId":"290","severity":1,"message":"291","line":17,"column":3,"nodeType":"292","messageId":"293","endLine":17,"endColumn":20},{"ruleId":"280","severity":1,"message":"294","line":2,"column":25,"nodeType":"282","messageId":"283","endLine":2,"endColumn":28},{"ruleId":"290","severity":1,"message":"291","line":9,"column":3,"nodeType":"292","messageId":"293","endLine":9,"endColumn":20},"Parsing error: Argument for '--jsx' option must be: 'preserve', 'react-native', 'react'.","lines-around-directive",["295"],"no-spaced-func",["296"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-native-reassign",["297"],"no-negated-in-lhs",["298"],"@typescript-eslint/no-unused-vars","'forkJoin' is defined but never used.","Identifier","unusedVar","'of' is defined but never used.","'SaveUserProperty' is defined but never used.","'JiraSprintStore' is defined but never used.","'GetJiraSprintsForBoards' is defined but never used.","'sprintBoards' is assigned a value but never used.","'kanbanBoards' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'tap' is defined but never used.","padding-line-between-statements","func-call-spacing","no-global-assign","no-unsafe-negation"]